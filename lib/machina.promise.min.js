/*
	machina.promise - A lightweight Promises/A compliant implementation for projects already using the machina state machine library.
	version:	0.1.1
	author:		Doug Neiner <dneiner@appendto.com>
	copyright:	2012 appendTo, LLC
	license:	Dual licensed
				MIT (http://opensource.org/licenses/mit-license)
				GPL (http://opensource.org/licenses/GPL-2.0)
*/
(function(e,n){if("object"==typeof module&&module.exports){var t=require("underscore");module.exports=n(t,require("machina")(t))}else"function"==typeof define&&define.amd?define(["underscore","machina"],function(t,i){return n(t,i,e)}):e.machina.Promise=n(e._,e.machina,e)})(this,function(e,n){var t=n.Fsm.extend({initialState:"unfulfilled",initialize:function(){e.bindAll(this,"reject","fulfill","then")},reject:function(e){this.handle("process",{action:"failed",data:e})},fulfill:function(e){this.handle("process",{action:"fulfilled",data:e})},then:function(n,i){var l=this,f=new t,a=function(){l.off("fulfilled",a),l.off("failed",a);var e,u="fulfilled"===l.state,s=u?n:i;if(s){try{e=s.apply(null,arguments)}catch(d){return f.reject.call(null,d),undefined}t.useExtensions&&e&&e.then?e.then(f.fulfill,f.reject):f.fulfill.call(null,e)}else f[u?"fulfill":"reject"].apply(null,arguments)};return this.on("fulfilled",a),this.on("failed",a),t.useExtensions?e.defer(function(){l.handle("then")}):this.handle("then"),f},states:{unfulfilled:{process:function(e){this._data=e.data,this.transition(e.action),this.handle("then")}},fulfilled:{then:function(){this.emit("fulfilled",this._data)}},failed:{then:function(){this.emit("failed",this._data)}}}});return t.useExtensions=!0,t});